/*

//---------------------------------------------------------------------------------------------------------------
//
//
// [ 入門 ] スプライトシートのマップチップからフィールドマップを描画するサンプル
//
//
//---------------------------------------------------------------------------------------------------------------


#include <time.h>
#include <string>
#include "../dxlib_ext/dxlib_ext.h"
#include "gm_main.h"


// スプライトシートから分割ロードしたグラフィックハンドルの格納用配列
int chip_graphics_handles[8] ;

// チップサイズ定数
const int CHIP_SIZE = 32 ;

// フィールドの縦横にいくつチップを並べるか
const int FIELD_CHIP_NUM_W = 10;
const int FIELD_CHIP_NUM_H = 10;

// グラフィックハンドル配列の配列番号の何番を使うかを並べた２次元配列
int field_map[ FIELD_CHIP_NUM_H ][ FIELD_CHIP_NUM_W ] = {
	{ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
	{ 5, 0, 0, 0, 0, 0, 5, 1, 1, 5 },
	{ 5, 0, 4, 3, 3, 0, 5, 1, 1, 5 },
	{ 5, 0, 4, 3, 3, 0, 5, 1, 1, 5 },
	{ 5, 0, 3, 3, 3, 0, 5, 5, 5, 5 },
	{ 5, 0, 0, 0, 5, 0, 5, 5, 5, 5 },
	{ 5, 5, 5, 5, 5, 5, 5, 6, 6, 5 },
	{ 5, 5, 5, 5, 5, 5, 6, 7, 7, 6 },
	{ 5, 0, 2, 0, 5, 5, 5, 6, 6, 5 },
	{ 5, 5, 0, 5, 5, 5, 5, 5, 5, 5 }
};


//------------------------------------------------------------------------------------------------------------
// ゲーム起動時に１度だけ実行されます
void gameStart() {
	srand(time(0));

	// 画像ファイルの分割ロード
	// ! ロードは重い処理でメモリも消費します　必要な時に１度だけ実行しましょう ( 毎フレーム実行されないよう工夫しましょう )
	// 第１引数... スプライトシートのファイルパス
	// 第２引数... 全体のチップ数
	// 第３引数... 横方向のチップ数
	// 第４引数... 縦方向のチップ数
	// 第５引数... １チップあたりの横幅サイズ
	// 第６引数... １チップあたりの高さサイズ
	// 第７引数... ロードしたハンドルを格納する配列
	LoadDivGraph("graphics/test_map_chip.bmp", 8, 4, 2, CHIP_SIZE, CHIP_SIZE, chip_graphics_handles);

}


//------------------------------------------------------------------------------------------------------------
// 毎フレーム実行されます
void gameMain(float delta_time) {


	// 描画する文字列のサイズを設定
	SetFontSize(50);


	// どこからマップチップを並べ始めるか
	int start_x = 16;
	int start_y = 16;

	// 左上のチップからループを使って描画していく
	for (int i = 0; i < FIELD_CHIP_NUM_H; ++i) {
		for (int k = 0; k < FIELD_CHIP_NUM_W; ++k) {
			DrawRotaGraph(start_x + (k * CHIP_SIZE), start_y + (i * CHIP_SIZE), 1.0f, 0, chip_graphics_handles[ field_map[i][k] ], true);
		}
	}

	DrawFpsIndicator({ 10, DXE_WINDOW_HEIGHT - 10, 0 }, delta_time);
}


//------------------------------------------------------------------------------------------------------------
// ゲーム終了時に１度だけ実行されます
void gameEnd() {
}


*/